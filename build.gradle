buildscript {
    ext.asmVersion = '9.6'
    ext.bouncycastleVersion = '1.77'
    ext.grpcProtobufVersion = '1.49.0'
    ext.jacksonVersion = '2.13.4.2'
    ext.javaWebSocketVersion = '1.5.3'
    ext.jnaVersion = '5.12.1'
    ext.neofsApiJavaVersion = '2.14.0-SNAPSHOT' // Replace with non-snapshot version once officially released.
    ext.neofsSharedLibVersion = '0.0.11'
    ext.okhttpVersion = '4.12.0'
    ext.protobufJavaUtilVersion = '3.21.9'
    ext.rxjavaVersion = '2.2.21'
    ext.slf4jVersion = '2.0.9'

    // test dependencies
    ext.awaitility = '4.2.0'
    ext.equalsverifierVersion = '3.15.2'
    ext.hamcrestVersion = '1.3'
    ext.jupiterVersion = '5.10.0'
    ext.logbackVersion = '1.3.14'
    ext.mockitoVersion = '4.11.0'
    ext.testcontainersVersion = '1.19.3'
    ext.wiremockVersion = '2.35.1'

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0' apply true
    id 'com.gradle.plugin-publish' version '1.2.1' apply false
    id 'jacoco' apply true
}

ext {
    asmVersion = '9.6'
    bouncycastleVersion = '1.77'
    grpcProtobufVersion = '1.49.0'
    jacksonVersion = '2.13.4.2'
    javaWebSocketVersion = '1.5.3'
    jnaVersion = '5.12.1'
    neofsApiJavaVersion = '2.14.0-SNAPSHOT' // Replace with non-snapshot version once officially released.
    neofsSharedLibVersion = '0.0.11'
    okhttpVersion = '4.12.0'
    protobufJavaUtilVersion = '3.21.9'
    rxjavaVersion = '2.2.21'
    slf4jVersion = '2.0.9'
    awaitility = '4.2.0'
    equalsverifierVersion = '3.15.2'
    hamcrestVersion = '1.3'
    jupiterVersion = '5.10.0'
    logbackVersion = '1.3.14'
    mockitoVersion = '4.11.0'
    testcontainersVersion = '1.19.3'
    wiremockVersion = '2.35.1'
}

nexusPublishing {
    repositories {
        sonatype {
//            nexusUrl = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
//            snapshotRepositoryUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
            // `sonatypeUsername` and `sonatypePassword` have to be either in ~/.gradle/gradle.properties or in
            // environment variables ORG_GRADLE_PROJECT_sonatypeUsername and ORG_GRADLE_PROJECT_sonatypePassword.
            username = sonatypeUsername
            password = sonatypePassword
        }
    }
}

allprojects { thisproject ->

    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'signing'
    //apply plugin: 'checkstyle'

    group 'io.neow3j'
    version '3.22.0'
    archivesBaseName = "${thisproject.name}"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
            targetCompatibility = JavaLanguageVersion.of(8)
        }
    }

    if (project.hasProperty('snapshot')) {
        version = version + '-SNAPSHOT'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    // We don't want any compiler warnings
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
    compileTestJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    javadoc {
        options.encoding = 'UTF-8'
    }

    jacoco {
        toolVersion = '0.8.9' // See http://www.eclemma.org/jacoco/.
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
        }
    }

    tasks.withType(Test).tap {
        configureEach {
            reports.html.getOutputLocation().set(file("${reporting.baseDir}/${name}"))
        }
    }

//    checkstyle {
//        toolVersion = "7.7"
//        configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
//    }
}

subprojects { project ->

    apply plugin: 'jvm-test-suite'

    if (project.name.startsWith('gradle-plugin')) {
        apply plugin: 'java-gradle-plugin'
        apply plugin: 'com.gradle.plugin-publish'
    }

    project.testing {
        suites {
            configureEach { task ->
                useJUnitJupiter()
                dependencies {
                    implementation("org.junit.jupiter:junit-jupiter:$jupiterVersion")
                    implementation("org.mockito:mockito-core:$mockitoVersion")
                    implementation("org.hamcrest:hamcrest-all:$hamcrestVersion")
                }
            }
            test(JvmTestSuite) {
                testType = TestSuiteType.UNIT_TEST
            }
            integrationTest(JvmTestSuite) {
                testType = TestSuiteType.INTEGRATION_TEST
                sources {
                    java {
                        srcDirs = ['src/test-integration/java']
                    }
                    resources {
                        srcDirs = ['src/test-integration/resources']
                    }
                    compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
                    runtimeClasspath += output + compileClasspath
                }
            }
        }
    }

    configurations {
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    }

    task javadocsJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task testsJar(type: Jar) {
        archiveClassifier = 'tests'
        from sourceSets.test.output
    }

    javadoc { options.encoding = 'UTF-8' }

    // We avoid building Maven artifacts for the root project, the gradle-plugin,
    // and the int-tests modules. Those don't need to be published to the
    // productive Maven central repo.
    //
    // However, the gradle-plugin should be published to the Sonatype snapshot repo
    // due to development purposes (e.g., testing the plugin in other projects).
    //
    // The gradle-plugin module should be published to the Gradle Plugin
    // global repository. See "gradle-plugin/README.md" for Gradle Plugin
    // release procedures.
    if (project.name != rootProject.name
            && !project.name.startsWith('gradle-plugin')
            && !project.name.startsWith('int-tests')
    ) {

        apply plugin: 'maven-publish'

        publishing {
            publications {
                mavenJava(MavenPublication) {

                    artifactId "${project.name}"

                    from components.java

                    artifacts { archives sourcesJar, javadocsJar, testsJar }

                    pom {
                        name = 'neow3j'
                        description.set(project.provider({ project.description }))
                        url = 'https://neow3j.io'

                        scm {
                            url = 'https://github.com/neow3j/neow3j'
                            connection = 'scm:https://github.com/neow3j/neow3j.git'
                            developerConnection = 'scm:https://github.com/neow3j/neow3j.git'
                        }

                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id = 'gsmachado'
                                name = 'Guilherme Sperb Machado'
                                email = 'guil@axlabs.com'
                            }
                            developer {
                                id = 'csmuller'
                                name = 'Claude MÃ¼ller'
                                email = 'claude@axlabs.com'
                            }
                            developer {
                                id = 'mialbu'
                                name = 'Michael Bucher'
                                email = 'michael@axlabs.com'
                            }
                        }
                    }
                }
            }
        }

        signing {
            // `signingKey` and `signingPassword` have to be either in ~/.gradle/gradle.properties or in
            // environment variables ORG_GRADLE_PROJECT_signingKey and ORG_GRADLE_PROJECT_signingPassword.
            // The signing key has to be the ASCII-armored, encrypted PGP private key for neow3j.
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications.mavenJava
        }

        task release {
            dependsOn 'build'
            dependsOn 'publish'

            tasks.findByName('publish').mustRunAfter 'build'
        }

        task bundleJar(type: Jar) {
            dependsOn publishToMavenLocal

            manifest.from jar.manifest
            archiveClassifier = 'all'

            from(javadocsJar, sourcesJar, javadocsJar, testsJar, jar)

            from("${buildDir}/libs") {
                include '*.jar.asc'
            }

            from("${buildDir}/publications/mavenJava") {
                include 'pom-default.xml.asc'
                include 'pom-default.xml'
                rename 'pom-default.xml.asc', "${project.name}-${project.version}.pom.asc"
                rename 'pom-default.xml', "${project.name}-${project.version}.pom"
            }
        }

    }
}

task allJars {
    // Adds as dependency all tasks in sub-projects that
    // has the type "Jar". This includes, for example, the
    // integration tests.
    dependsOn subprojects.collect { it.tasks.withType(Jar) }
}

task jacocoRootTestReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    getAdditionalSourceDirs().from(subprojects.sourceSets.main.allSource.srcDirs)
    getSourceDirectories().from(subprojects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(subprojects.sourceSets.main.output)
    getExecutionData().from(files(subprojects.jacocoTestReport.executionData).filter { f -> f.exists() })

    reports {
        xml.required = true
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(getClassDirectories().files.collect {
            fileTree(
                    dir: it,
                    // here we specify which path/modules should be
                    // excluded from the jacoco reports
                    exclude: [
                            '**/io/neow3j/devpack/**',
                            '**/io/neow3j/test/**',
                    ]
            )
        }))
    }
}
