buildscript {
    ext.asmVersion = '9.3'
    ext.bouncycastleVersion = '1.70'
    ext.grpcProtobufVersion = '1.49.0'
    ext.jacksonVersion = '2.13.4.2'
    ext.javaWebSocketVersion = '1.5.3'
    ext.jnaVersion = '5.12.1'
    ext.neofsApiJavaVersion = '2.14.0-SNAPSHOT' // Replace with non-snapshot version once officially released.
    ext.neofsSharedLibVersion = '0.0.8'
    ext.okhttpVersion = '4.10.0'
    ext.protobufJavaUtilVersion = '3.21.9'
    ext.rxjavaVersion = '2.2.21'
    ext.slf4jVersion = '1.7.36'

    // test dependencies
    ext.awaitility = '4.2.0'
    ext.equalsverifierVersion = '3.10.1'
    ext.hamcrestVersion = '1.3'
    ext.junitVersion = '4.13.2'
    ext.junitBenchmarkVersion = '0.7.2'
    ext.jetbrainsAnnotationsVersion = '23.0.0'
    ext.jGitVersion = '4.6.0.201612231935-r'
    ext.jupiterVersion = '5.9.0'
    ext.logbackVersion = '1.2.11'
    ext.mockitoVersion = '3.6.0'
    ext.testcontainersVersion = '1.17.4'
    ext.wiremockVersion = '2.33.2'

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id 'org.unbroken-dome.test-sets' version '3.0.1' apply false
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0' apply true
    id 'com.gradle.plugin-publish' version '0.12.0' apply false
    id 'jacoco' apply true
}

description 'neow3j Project'

ext {
    publishSonaTypeUsername = project.hasProperty('nexusUsername') ? project.property('nexusUsername') : ''
    publishSonaTypePassword = project.hasProperty('nexusPassword') ? project.property('nexusPassword') : ''
    publishGitHubUsername = project.hasProperty('githubUsername') ? project.property('githubUsername') : ''
    publishGitHubPassword = project.hasProperty('githubPassword') ? project.property('githubPassword') : ''
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            snapshotRepositoryUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
            username = publishSonaTypeUsername
            password = publishSonaTypePassword
        }
        github {
            nexusUrl = uri("https://maven.pkg.github.com/neow3j/neow3j/")
            snapshotRepositoryUrl = uri("https://maven.pkg.github.com/neow3j/neow3j/")
            username = publishGitHubUsername
            password = publishGitHubPassword
        }
    }
}

allprojects { thisproject ->

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'signing'
    //apply plugin: 'checkstyle'

    group 'io.neow3j'
    version '3.19.4'
    archivesBaseName = "${thisproject.name}"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    if (project.hasProperty('snapshot')) {
        version = version + '-SNAPSHOT'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    // We don't want any compiler warnings
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
    compileTestJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    javadoc {
        options.encoding = 'UTF-8'
    }

    jacoco {
        toolVersion = '0.8.6' // See http://www.eclemma.org/jacoco/.
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
        }
    }

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
    }

//    checkstyle {
//        toolVersion = "7.7"
//        configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
//    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.unbroken-dome.test-sets'

    if (project.name.startsWith('gradle-plugin')) {
        apply plugin: 'java-gradle-plugin'
        apply plugin: 'com.gradle.plugin-publish'
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter:$jupiterVersion",
                "org.mockito:mockito-core:$mockitoVersion",
                "org.hamcrest:hamcrest-all:$hamcrestVersion"
    }

    test {
        useJUnitPlatform()
    }

    task javadocsJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task testsJar(type: Jar) {
        archiveClassifier = 'tests'
        from sourceSets.test.output
    }

    javadoc { options.encoding = 'UTF-8' }

    artifacts { archives sourcesJar, javadocsJar, testsJar }

    // We just avoid to publish the root project and the test-properties project.
    // The gradle-plugin module is fine and desirable to publish to JFrog/SonaType.
    // In addition the gradle-plugin module should be published to the Gradle Plugin
    // global repository. See "gradle-plugin/README.md" for Gradle Plugin
    // release procedures.
    if (project.name != rootProject.name) {

        apply plugin: 'maven-publish'

        publishing {
            publications {
                mavenJava(MavenPublication) {

                    artifactId "${project.name}"

                    from components.java

                    artifact sourcesJar
                    artifact javadocsJar
                    artifact testsJar

                    pom {
                        name = 'neow3j'
                        description.set(project.provider({ project.description }))
                        url = 'https://neow3j.io'

                        scm {
                            url = 'https://github.com/neow3j/neow3j'
                            connection = 'scm:https://github.com/neow3j/neow3j.git'
                            developerConnection = 'scm:https://github.com/neow3j/neow3j.git'
                        }

                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id = 'gsmachado'
                                name = 'Guilherme Sperb Machado'
                                email = 'guil@axlabs.com'
                            }
                            developer {
                                id = 'csmuller'
                                name = 'Claude MÃ¼ller'
                                email = 'claude@axlabs.com'
                            }
                            developer {
                                id = 'mialbu'
                                name = 'Michael Bucher'
                                email = 'michael@axlabs.com'
                            }
                        }
                    }
                }
            }
        }

        signing {
            // only execute as part of this task
            required {
                gradle.taskGraph.hasTask('publish')
            }
            sign publishing.publications.mavenJava
        }

        task release {
            dependsOn 'build'
            dependsOn 'publish'

            tasks.findByName('publish').mustRunAfter 'build'
        }

        task bundleJar(type: Jar) {
            dependsOn publishToMavenLocal

            manifest.from jar.manifest
            archiveClassifier = 'all'

            from(javadocsJar, sourcesJar, javadocsJar, testsJar, jar)

            from("${buildDir}/libs") {
                include '*.jar.asc'
            }

            from("${buildDir}/publications/mavenJava") {
                include 'pom-default.xml.asc'
                include 'pom-default.xml'
                rename 'pom-default.xml.asc', "${project.name}-${project.version}.pom.asc"
                rename 'pom-default.xml', "${project.name}-${project.version}.pom"
            }
        }

    }
}

task allJars {
    // Adds as dependency all tasks in sub-projects that
    // has the type "Jar". This includes, for example, the
    // integration tests.
    dependsOn subprojects.collect { it.tasks.withType(Jar) }
}

task jacocoRootTestReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    getAdditionalSourceDirs().from(subprojects.sourceSets.main.allSource.srcDirs)
    getSourceDirectories().from(subprojects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(subprojects.sourceSets.main.output)
    getExecutionData().from(files(subprojects.jacocoTestReport.executionData).filter { f -> f.exists() })

    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(getClassDirectories().files.collect {
            fileTree(
                    dir: it,
                    // here we specify which path/modules should be
                    // excluded from the jacoco reports
                    exclude: [
                            '**/io/neow3j/devpack/**',
                            '**/io/neow3j/test/**',
                    ]
            )
        }))
    }
}
