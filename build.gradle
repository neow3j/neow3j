plugins {
    // The Nexus publishing Plugin dictates that it has to applied to the root project.
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'jacoco'
}

ext {
    asmVersion = '9.6'
    bouncycastleVersion = '1.77'
    grpcProtobufVersion = '1.49.0'
    jacksonVersion = '2.13.4.2'
    javaWebSocketVersion = '1.5.3'
    jnaVersion = '5.12.1'
    neofsApiJavaVersion = '2.14.0-SNAPSHOT' // Replace with non-snapshot version once officially released.
    neofsSharedLibVersion = '0.0.11'
    okhttpVersion = '4.12.0'
    protobufJavaUtilVersion = '3.21.9'
    rxjavaVersion = '2.2.21'
    slf4jVersion = '2.0.9'
    awaitility = '4.2.0'
    equalsverifierVersion = '3.15.2'
    hamcrestVersion = '1.3'
    jupiterVersion = '5.10.0'
    logbackVersion = '1.3.14'
    mockitoVersion = '4.11.0'
    testcontainersVersion = '1.19.3'
    wiremockVersion = '2.35.1'
}

group 'io.neow3j'
version '3.22.0'
if (project.hasProperty('snapshot')) {
    version = version + '-SNAPSHOT'
}

// The Nexus publishing Plugin dictates that this has to be set on the root project.
nexusPublishing {
    repositories {
        sonatype {
            // `sonatypeUsername` and `sonatypePassword` have to be either in ~/.gradle/gradle.properties or in
            // environment variables ORG_GRADLE_PROJECT_sonatypeUsername and ORG_GRADLE_PROJECT_sonatypePassword.
            username = project.findProperty("sonatypeUsername")
            password = project.findProperty("sonatypePassword")
        }
    }
}

// Root project requires this for the jacoco plugin.
repositories {
    mavenCentral()
}

subprojects { subproject ->
    apply plugin: 'jvm-test-suite'
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'idea'

    group parent.group
    version parent.version
    archivesBaseName = "${subproject.name}"

    repositories {
        mavenCentral()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
            targetCompatibility = JavaLanguageVersion.of(8)
        }
        withSourcesJar()
        withJavadocJar()
    }

    // We don't want any compiler warnings
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    compileTestJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    javadoc {
        options.encoding = 'UTF-8'
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
        }
    }

    tasks.withType(Test).tap {
        configureEach {
            reports.html.getOutputLocation().set(file("${reporting.baseDir}/${name}"))
        }
    }

    subproject.testing {
        suites {
            configureEach { task ->
                useJUnitJupiter()
                dependencies {
                    implementation("org.junit.jupiter:junit-jupiter:$jupiterVersion")
                    implementation("org.mockito:mockito-core:$mockitoVersion")
                    implementation("org.hamcrest:hamcrest-all:$hamcrestVersion")
                }
            }
            test(JvmTestSuite) {
                testType = TestSuiteType.UNIT_TEST
            }
            integrationTest(JvmTestSuite) {
                testType = TestSuiteType.INTEGRATION_TEST
                sources {
                    java {
                        srcDirs = ['src/test-integration/java']
                    }
                    resources {
                        srcDirs = ['src/test-integration/resources']
                    }
                    compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
                    runtimeClasspath += output + compileClasspath
                }
            }
        }
    }

    configurations {
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    }

    task testsJar(type: Jar) {
        archiveClassifier = 'tests'
        from sourceSets.test.output
    }

    javadoc { options.encoding = 'UTF-8' }

    // The publishing extension is not applied to the 'int-tests' and 'gradle-plugin' modules. We don't want 'int-tests'
    // to be published anywhere. Note that the gradle-plugin module implicitly uses the maven-publish plugin. This
    // leads to the nexus.publish-plugin plugin automatically including the gradle-plugin module when running tasks like
    // `publishToSonatype`. We can't do much against that. But, in any case we do not want the below build logic to
    // apply to the gradle-plugin because it uses different publishing and singing attributes.
    if (subproject.name != 'int-tests' && subproject.name != 'gradle-plugin') {
        apply plugin: 'maven-publish'
        apply plugin: 'signing'

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifactId "${subproject.name}"
                    from components.java
                    pom {
                        name = 'neow3j'
                        description.set(subproject.provider({ subproject.description }))
                        url = 'https://neow3j.io'
                        scm {
                            url = 'https://github.com/neow3j/neow3j'
                            connection = 'scm:https://github.com/neow3j/neow3j.git'
                            developerConnection = 'scm:https://github.com/neow3j/neow3j.git'
                        }
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                id = 'gsmachado'
                                name = 'Guilherme Sperb Machado'
                                email = 'guil@axlabs.com'
                            }
                            developer {
                                id = 'csmuller'
                                name = 'Claude MÃ¼ller'
                                email = 'claude@axlabs.com'
                            }
                            developer {
                                id = 'mialbu'
                                name = 'Michael Bucher'
                                email = 'michael@axlabs.com'
                            }
                        }
                    }
                }
            }
        }

        signing {
            // `signingKey` and `signingPassword` have to be either in ~/.gradle/gradle.properties or in
            // environment variables ORG_GRADLE_PROJECT_signingKey and ORG_GRADLE_PROJECT_signingPassword.
            // The signing key has to be the ASCII-armored, encrypted PGP private key for neow3j.
            useInMemoryPgpKeys(project.findProperty("signingKey"), project.findProperty("signingPassword"))
            sign publishing.publications.mavenJava
        }

        task bundleJar(type: Jar) {
            dependsOn publishToMavenLocal

            manifest.from jar.manifest
            archiveClassifier = 'all'

            from(javadocJar, sourcesJar, testsJar, jar)

            from("${buildDir}/libs") {
                include '*.jar.asc'
            }

            from("${buildDir}/publications/mavenJava") {
                include 'pom-default.xml.asc'
                include 'pom-default.xml'
                rename 'pom-default.xml.asc', "${subproject.name}-${subproject.version}.pom.asc"
                rename 'pom-default.xml', "${subproject.name}-${subproject.version}.pom"
            }
        }
    }
}

task jacocoRootTestReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    getAdditionalSourceDirs().from(subprojects.sourceSets.main.allSource.srcDirs)
    getSourceDirectories().from(subprojects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(subprojects.sourceSets.main.output)
    getExecutionData().from(files(subprojects.jacocoTestReport.executionData).filter { f -> f.exists() })

    reports {
        xml.required = true
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(getClassDirectories().files.collect {
            fileTree(
                    dir: it,
                    // here we specify which path/modules should be
                    // excluded from the jacoco reports
                    exclude: [
                            '**/io/neow3j/devpack/**',
                            '**/io/neow3j/test/**',
                    ]
            )
        }))
    }
}
